/*
 * This file is generated by jOOQ.
 */
package com.example.db.tables.records;


import com.example.db.tables.AuthorBook;

import java.time.LocalDateTime;

import org.jooq.Record2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class AuthorBookRecord extends UpdatableRecordImpl<AuthorBookRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.author_book.book_id</code>.
     */
    public void setBookId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.author_book.book_id</code>.
     */
    public Integer getBookId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.author_book.author_id</code>.
     */
    public void setAuthorId(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.author_book.author_id</code>.
     */
    public Integer getAuthorId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>public.author_book.created_date_time</code>.
     */
    public void setCreatedDateTime(LocalDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.author_book.created_date_time</code>.
     */
    public LocalDateTime getCreatedDateTime() {
        return (LocalDateTime) get(2);
    }

    /**
     * Setter for <code>public.author_book.updated_date_time</code>.
     */
    public void setUpdatedDateTime(LocalDateTime value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.author_book.updated_date_time</code>.
     */
    public LocalDateTime getUpdatedDateTime() {
        return (LocalDateTime) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<Integer, Integer> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AuthorBookRecord
     */
    public AuthorBookRecord() {
        super(AuthorBook.AUTHOR_BOOK);
    }

    /**
     * Create a detached, initialised AuthorBookRecord
     */
    public AuthorBookRecord(Integer bookId, Integer authorId, LocalDateTime createdDateTime, LocalDateTime updatedDateTime) {
        super(AuthorBook.AUTHOR_BOOK);

        setBookId(bookId);
        setAuthorId(authorId);
        setCreatedDateTime(createdDateTime);
        setUpdatedDateTime(updatedDateTime);
        resetChangedOnNotNull();
    }
}
